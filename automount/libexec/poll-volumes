#!/usr/bin/env python
"""
   Copyright 2016 The Trustees of Princeton University

   Licensed under the Apache License, Version 2.0 (the "License");
   you may not use this file except in compliance with the License.
   You may obtain a copy of the License at

       http://www.apache.org/licenses/LICENSE-2.0

   Unless required by applicable law or agreed to in writing, software
   distributed under the License is distributed on an "AS IS" BASIS,
   WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
   See the License for the specific language governing permissions and
   limitations under the License.
"""

# helper to get the list of volumes to mount.
# used by syndicate-amd.
# talks to the automount server (syndicate-amd-server)

import os
import sys
import json 
import httplib
import json
import subprocess

from Crypto.PublicKey import RSA as CryptoKey

import syndicate.util.crypto as crypto
import syndicate.util.config as conf

log = conf.log

def poll_volumes_amd_server( client_host, client_pkey, instance_id, amd_host, amd_port ):
    """
    Get the list of volumes (and gateways) to mount on this host.
    Poll a remotely-running AMD server.
    """

    # generate a request and write it to stdout
    request = {
        "hostname": client_host,
        "instance": instance_id
    }
    request_txt = json.dumps(request)
    pkey = None 

    signed_json_text = crypto.sign_and_serialize_json( client_pkey, request_txt, toplevel_fields={'hostname': client_host} )

    con = httplib.HTTPConnection( amd_host, amd_port )
    con.request( "POST", "/", body=signed_json_text, headers={"content-type": "text/plain"})
    
    resp = con.getresponse()
    data_json = resp.read()
    con.close()

    # try to parse as JSON 
    try:
        data = json.loads(data_json.strip())
        return data
    except:
        log.error("Failed to parse JSON response")
        return None


def poll_volumes_file( client_host, client_pkey, instance_id, amd_host, amd_port ):
    """
    Get the list of volumes (and gateways) to mount on this host.
    Poll from a provision plan file on disk (given as the amd_host argument).
    """

    path = amd_host
    amd_server_bin = os.getenv("SYNDICATE_AMD_SERVER", None)
    amd_server_config = os.getenv("SYNDICATE_AMD_CONFIG", None)
    amd_server_debug = os.getenv("SYNDICATE_AMD_DEBUG", "0")

    if amd_server_bin is None:
        # guess
        log.warn("No SYNDICATE_AMD_SERVER environment variable defined.  Guessing 'syndicate-amd-server'")
        amd_server_bin = "syndicate-amd-server"

    args = [amd_server_bin]

    if amd_server_debug != "0":
        args += ['-d']

    if amd_server_config is not None:
        args += ['-c', amd_server_config]

    args += ['hostinfo', path, client_host, instance_id]
    client_pubkey = client_pkey.publickey().exportKey()

    # get our provision plan 
    try:
        p = subprocess.Popen( args, stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE, shell=False )
    except Exception, e:
        log.exception(e)
        log.error("Failed to launch '%s'" % amd_server_bin)
        sys.exit(1)

    provision_txt, err = p.communicate( client_pubkey )
    if p.poll() != 0:
        log.error("'%s' exited %s" % (amd_server_bin, p.poll()))
        log.error("Error messages\n%s" % err)
        sys.exit(1)

    try:
        provision_plan = json.loads(provision_txt)
    except:
        log.error("Failed to parse provision plan")
        sys.exit(1)

    return provision_plan


if __name__ == "__main__":

    usage = "Usage: %s [client hostname] [instance ID] [AMD hostname] [AMD portnum] < client_private_key" % sys.argv[0]

    if len(sys.argv) != 5:
        print >> sys.stderr, usage
        sys.exit(1)

    client_host = sys.argv[1]
    instance_id = sys.argv[2]
    amd_host = sys.argv[3]
    amd_port = None
    pkey = None

    try:
        amd_port = int(sys.argv[4])
    except:
        print >> sys.stderr, usage
        sys.exit(1)

    client_privkey_pem = sys.stdin.read().strip()
    try:
        pkey = CryptoKey.importKey( client_privkey_pem )
    except Exception, e:
        print >> sys.stderr, usage
        sys.exit(1)

    volume_data = poll_volumes_amd_server( client_host, pkey, instance_id, amd_host, amd_port )
    #volume_data = poll_volumes_file( client_host, pkey, instance_id, amd_host, amd_port )
    print json.dumps(volume_data, indent=4, sort_keys=True)
    sys.exit(0)
